Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom PIL import Image, ImageTk\r\nimport cv2\r\nimport utils.deletion\r\nimport utils.viewing\r\nimport utils.loader\r\nimport utils.frame_handling\r\nimport utils.registration\r\nimport utils.redirect\r\n\r\n\r\nEAR_THRESH = 0.20\r\nBLINK_CONSEC_FRAMES = 1\r\nCOUNTER = 0\r\nBLINKS_REQUIRED = 3\r\nTOTAL = BLINKS_REQUIRED\r\nFRAME_WIDTH = 500\r\nproceed_button = None\r\nFACE_DISTANCE_THRESHOLD = 0.45\r\nADMIN_PASSWORD = \"admin\"\r\nregister_button = None\r\nencodings_file = \"encodings.pickle\"\r\nUNMATCH_BOX_COLOR = (0, 0, 255)\r\nMATCH_BOX_COLOR = (0, 255, 0)\r\nbutton_config = {\r\n        \"bg\": \"LightGray\",\r\n        \"fg\": \"Red\",\r\n        \"font\": (\"Arial\", 8),\r\n    }\r\nzoom_level = 100\r\n\r\n\r\ndata, _ = utils.loader.load_data(encodings_file, 'normal', '')\r\n\r\n\r\ndef create_proceed_button():\r\n    utils.redirect.redirect(proceed_button, TOTAL)\r\n\r\n\r\ndef create_register_button():\r\n    global register_button\r\n    if register_button is None:\r\n        register_button = tk.Button(frame_controls, text=\"Register Face\", command=register_face,\r\n                                    bg=button_config[\"bg\"], fg=button_config[\"fg\"], font=button_config[\"font\"])\r\n        register_button.pack()\r\n\r\n\r\ndef hide_register_button():\r\n    global register_button\r\n    if register_button is not None:\r\n        register_button.pack_forget()\r\n        register_button = None\r\n\r\n\r\ndef view_people_in_db():\r\n    global data\r\n    utils.viewing.view_people(ADMIN_PASSWORD, window, data)\r\n\r\n\r\ndef delete_people_in_db():\r\n    global data, encodings_file\r\n    utils.deletion.delete_people(data, encodings_file, ADMIN_PASSWORD, window)\r\n\r\n\r\ndef update_message_show_right(sno, name):\r\n    label_blink_count_secret.config(text=TOTAL)\r\n    if sno == -1:\r\n        label_message.config(text=f\"Unknown Face\")\r\n    else:\r\n        label_message.config(text=f\"Welcome {name}, face identified\")\r\n\r\n\r\ndef display_in_tkinter(frame):\r\n    cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)\r\n    img = Image.fromarray(cv2image)\r\n    imgtk = ImageTk.PhotoImage(image=img)\r\n    label_video.imgtk = imgtk\r\n    label_video.configure(image=imgtk)\r\n\r\n\r\ndef draw_rectangle_and_name(frame, left, top, right, bottom, name, box_color):\r\n    cv2.rectangle(frame, (left, top), (right, bottom), box_color, 2)\r\n    y = top - 15 if top - 15 > 15 else top + 15\r\n    cv2.putText(frame, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX, 0.75, box_color, 2)\r\n\r\n\r\ndef update_counter_and_total(ear):\r\n    global COUNTER, TOTAL\r\n    if ear < EAR_THRESH:\r\n        COUNTER += 1\r\n    else:\r\n        if COUNTER >= BLINK_CONSEC_FRAMES:\r\n            if TOTAL > 0:\r\n                TOTAL -= 1\r\n        COUNTER = 0\r\n\r\n\r\ndef register_button_visibility(sno, register_button):\r\n    if sno == -1:\r\n        if register_button is None:\r\n            create_register_button()\r\n    else:\r\n        hide_register_button()\r\n\r\n\r\ndef update_image():\r\n    global COUNTER, TOTAL, proceed_button, register_button\r\n    ret, frame = cap.read()\r\n    if ret:\r\n        frame = utils.frame_handling.zoom_frame(frame, zoom_level)\r\n        face_locations, rgb_frame, frame = utils.frame_handling.get_all_faces(frame, FRAME_WIDTH)\r\n        largest_face_location = utils.frame_handling.find_most_prominent_face(face_locations)\r\n\r\n        name = \"Unknown\"\r\n        sno = -1\r\n        ear = 0\r\n\r\n        if largest_face_location:\r\n            face_landmarks_list, face_encodings = utils.frame_handling.landmarks_list_and_encodings(rgb_frame, largest_face_location)\r\n            ear = utils.frame_handling.process_eyes(frame, face_landmarks_list[0])\r\n            update_counter_and_total(ear)\r\n\r\n            top, right, bottom, left = largest_face_location\r\n\r\n            encoding = face_encodings[0]\r\n\r\n            if True:\r\n                sno, name = utils.frame_handling.find_nearest_face(data,encoding,FACE_DISTANCE_THRESHOLD)\r\n\r\n                # Face Bounding Box\r\n                box_color = UNMATCH_BOX_COLOR\r\n                if TOTAL == 0 and sno != -1:\r\n                    box_color = MATCH_BOX_COLOR\r\n                    if proceed_button is None:\r\n                        create_proceed_button()\r\n                    hide_register_button()\r\n                register_button_visibility(sno, register_button)\r\n                draw_rectangle_and_name(frame, left, top, right, bottom, name, box_color)\r\n\r\n        # Blink Count and EAR Text\r\n        # blink_text = f\"Blinks: {TOTAL}\"\r\n        # ear_text = f\"EAR: {ear:.2f}\"\r\n\r\n        # cv2.putText(frame, blink_text, (frame.shape[1] - 120, frame.shape[0] - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.7,(255, 255, 255), 2)\r\n        # cv2.putText(frame, ear_text, (frame.shape[1] - 120, frame.shape[0] - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.3,(255, 255, 255), 1)\r\n\r\n        # label_blink_count.config(text=blink_text)\r\n        # label_ear.config(text=ear_text)\r\n\r\n        update_message_show_right(sno, name)\r\n        display_in_tkinter(frame)\r\n\r\n    window.after(10, update_image)\r\n\r\n\r\ndef register_face():\r\n    global data, TOTAL\r\n    utils.registration.register_face(data, TOTAL, ADMIN_PASSWORD, cap,\r\n                                     encodings_file, BLINKS_REQUIRED, window)\r\n\r\n# Tkinter Window\r\nwindow = tk.Tk()\r\nwindow.title(\"Face Recognition System\")\r\n\r\nframe_video = tk.Frame(window)\r\nframe_controls = tk.Frame(window)\r\nframe_video.pack(side=\"left\", padx=10, pady=10)\r\nframe_controls.pack(side=\"right\", padx=10, pady=10)\r\n\r\nlabel_video = tk.Label(frame_video)\r\nlabel_video.pack()\r\n\r\nlabel_blink_count_secret = tk.Label(window, text=\"0\")\r\nlabel_blink_count_secret.place(relx=0.97, rely=0.97, anchor=\"se\")\r\n\r\n# label_blink_count = tk.Label(window, text=\"Blinks: 0\")\r\n# label_blink_count.place(relx=0.95, rely=0.95, anchor=\"se\")\r\n\r\n# label_ear = tk.Label(window, text=\"EAR: 0.00\")\r\n# label_ear.place(relx=0.95, rely=0.90, anchor=\"se\")\r\n\r\nlabel_message = tk.Label(frame_controls, text=\"\", width=30, height=2)\r\nlabel_message.pack()\r\n\r\n\r\ndef create_specified_buttons(frame, allowed_buttons):\r\n    button_actions = {\r\n        \"register\": (\"Register Face\", register_face),\r\n        \"delete\": (\"Delete Person\", delete_people_in_db),\r\n        \"view\": (\"View Registered People\", view_people_in_db)\r\n    }\r\n\r\n    for name in allowed_buttons:\r\n        if name in button_actions:\r\n            text, command = button_actions[name]\r\n            button = tk.Button(frame, text=text, command=command,\r\n                               bg=button_config[\"bg\"], fg=button_config[\"fg\"], font=button_config[\"font\"])\r\n            button.pack()\r\n\r\n\r\ndef open_settings_window():\r\n    settings_window = tk.Toplevel(window)\r\n    settings_window.title(\"Settings\")\r\n\r\n    tk.Label(settings_window, text=\"Zoom Level:\").pack()\r\n    zoom_level_entry = tk.Entry(settings_window)\r\n    zoom_level_entry.insert(0, str(zoom_level))\r\n    zoom_level_entry.pack()\r\n\r\n    def apply_settings():\r\n        global zoom_level\r\n        zoom_level = int(zoom_level_entry.get())\r\n        settings_window.destroy()\r\n\r\n    tk.Button(settings_window, text=\"Apply\", command=apply_settings).pack()\r\n\r\n\r\noriginal_icon = Image.open(r\"C:\\Users\\Mukul  Dev\\PycharmProjects\\FR_2Dv3\\images\\gear.jpg\")\r\nresized_icon = original_icon.resize((30, 30))\r\ngear_icon = ImageTk.PhotoImage(resized_icon)\r\ngear_button = tk.Button(window, image=gear_icon, command=open_settings_window)\r\ngear_button.place(relx=0.97, rely=0.03, anchor=\"ne\")\r\n\r\n\r\nbutton_list = []\r\ncreate_specified_buttons(frame_controls, button_list)\r\n\r\ncap = cv2.VideoCapture(0)\r\nupdate_image()\r\nwindow.mainloop()\r\n\r\n\r\ncap.release()\r\ncv2.destroyAllWindows()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 35dd2cf0514e6ecde7f0e7d823569815def8282e)
+++ b/main.py	(date 1704186011535)
@@ -215,8 +215,7 @@
     tk.Button(settings_window, text="Apply", command=apply_settings).pack()
 
 
-original_icon = Image.open(r"C:\Users\Mukul  Dev\PycharmProjects\FR_2Dv3\images\gear.jpg")
-resized_icon = original_icon.resize((30, 30))
+resized_icon = Image.open(r"images\gear.jpg").resize((30, 30))
 gear_icon = ImageTk.PhotoImage(resized_icon)
 gear_button = tk.Button(window, image=gear_icon, command=open_settings_window)
 gear_button.place(relx=0.97, rely=0.03, anchor="ne")
